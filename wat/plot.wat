(module
  (import "math" "log2" (func $log2 (param f64) (result f64)))
  (import "js" "shared_mem" (memory 18))

  (global $image_offset   (import "js" "image_offset")   i32)
  (global $palette_offset (import "js" "palette_offset") i32)
  (global $BAILOUT f64 (f64.const 100.0))
  (global $BLACK i32 (i32.const 0xFF2D0725))

  ;; Escape time algorithm
  (func $escape_time
      (param $zx f64)
      (param $zy f64)
      (param $cx f64)
      (param $cy f64)
      (param $max_iters i32)
      (result i32 f64)

    (local $iters i32)
    (local $zx_sqr f64)
    (local $zy_sqr f64)

    (loop $next_iter
      (local.set $zx_sqr (f64.mul (local.get $zx) (local.get $zx)))
      (local.set $zy_sqr (f64.mul (local.get $zy) (local.get $zy)))

      (if
        ;; Bailout condition (abs2 too large or too many iterations)
        (i32.and
          (f64.gt (global.get $BAILOUT) (f64.add (local.get $zx_sqr) (local.get $zy_sqr)))
          (i32.gt_u (local.get $max_iters) (local.get $iters))
        )
        (then
          ;; Compute next z using the formulas below
          ;; $zy = $cy + (2 * $zy * $zx)
          ;; $zx = $cx + ($zx_sqr - $zy_sqr)
          (local.set $zy (f64.add (local.get $cy) (f64.mul (local.get $zy) (f64.add (local.get $zx) (local.get $zx)))))
          (local.set $zx (f64.add (local.get $cx) (f64.sub (local.get $zx_sqr) (local.get $zy_sqr))))
          (local.set $iters (i32.add (local.get $iters) (i32.const 1)))
          br $next_iter
        )
      )
    )

    (local.get $iters)
    (f64.add (local.get $zx_sqr) (local.get $zy_sqr))
  )

  (func $continuous_iter
      (param $iter i32)
      (param $abs2z f64)
      (result f64)

    local.get $iter
    i32.const 1
    i32.add
    f64.convert_i32_u
    local.get $abs2z
    call $log2
    f64.const 2.0
    f64.div
    call $log2
    f64.sub
    f64.const 0
    f64.max
  )

  (func $to_index
      (param $iter f64)
      (result i32)

    local.get $iter
    f64.const 8.0
    f64.mul
    f64.nearest
    i32.trunc_f64_u
    i32.const 511
    i32.rem_u
  )

  ;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ;; Plot Mandelbrot or Julia set
  (func (export "mandel_plot")
      (param $width i32)     ;; Canvas width
      (param $height i32)    ;; Canvas height
      (param $origin_x f64)  ;; X origin coordinate
      (param $origin_y f64)  ;; Y origin coordinate
      (param $ppu_f64 f64)   ;; Canvas pixels per unit on the complex plane (used floats so it doesn't overflow)
      (param $max_iters i32) ;; Maximum iteration count

    (local $x_pos i32)
    (local $y_pos i32)
    (local $cx f64)
    (local $cy f64)
    (local $cx_int f64)
    (local $cy_int f64)
    (local $pixel_offset i32)
    (local $iter i32)
    (local $abs2z f64)
    (local $half_width f64)
    (local $half_height f64)

    (local.set $half_width  (f64.convert_i32_u (i32.shr_u (local.get $width)  (i32.const 1))))
    (local.set $half_height (f64.convert_i32_u (i32.shr_u (local.get $height) (i32.const 1))))

    (local.set $pixel_offset (global.get $image_offset))

    ;; Intermediate X and Y coords based on static values
    ;; $origin - ($half_dimension / $ppu)
    (local.set $cx_int
      (f64.sub (local.get $origin_x)
        (f64.div (local.get $half_width) (local.get $ppu_f64))
      )
    )
    (local.set $cy_int
      (f64.add (local.get $origin_y)
        (f64.div (local.get $half_height) (local.get $ppu_f64))
      )
    )

    (loop $rows
      ;; Continue plotting rows?
      (if (i32.gt_u (local.get $height) (local.get $y_pos))
        (then
          ;; Translate y position to y coordinate
          (local.set $cy
            (f64.sub
              (local.get $cy_int)
              (f64.div (f64.convert_i32_u (local.get $y_pos)) (local.get $ppu_f64))
            )
          )

          (loop $cols
          ;; Continue plotting columns?
            (if (i32.gt_u (local.get $width) (local.get $x_pos))
              (then
                ;; Translate x position to x coordinate
                (local.set $cx
                  (f64.add
                    (local.get $cx_int)
                    (f64.div (f64.convert_i32_u (local.get $x_pos)) (local.get $ppu_f64))
                  )
                )

                ;; Store the current pixel's colour using the value returned from the following
                ;; if expression
                (i32.store
                  (local.get $pixel_offset)
                  (if (result i32)
                    ;; Does the current pixel hit max_iters?
                    (i32.eq
                      (local.get $max_iters)
                      ;; Calculate the current pixel's iteration value and store in $iter
                      (local.tee $iter
                        (local.set $abs2z
                          (call $escape_time
                            (f64.const 0.0)
                            (f64.const 0.0)
                            (local.get $cx)
                            (local.get $cy)
                            (local.get $max_iters)
                          )
                        )
                      )
                    )
                    ;; Yup, so return black
                    (then (global.get $BLACK))
                    ;; Nope, so return whatever colour corresponds to this iteration value
                    (else
                      ;; Push the relevant colour from the palette onto the stack
                      (i32.load
                          (i32.add (global.get $palette_offset)
                            (i32.shl
                              (call $to_index (call $continuous_iter (local.get $iter) (local.get $abs2z)))
                              (i32.const 2)
                            )
                          )
                      )
                    )
                  )
                )

                ;; Increment column and memory offset counters
                (local.set $x_pos (i32.add (local.get $x_pos) (i32.const 1)))
                (local.set $pixel_offset (i32.add (local.get $pixel_offset) (i32.const 4)))

                ;; Plot the next column
                br $cols
              )
            )
          ) ;; end of $cols loop

          ;; Reset the column counter and increment the row counter
          (local.set $x_pos (i32.const 0))
          (local.set $y_pos (i32.add (local.get $y_pos) (i32.const 1)))

          ;; Plot the next row
          br $rows
        )
      )
    ) ;; end of $rows loop
  )

  ;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ;; Plot Julia set
  (func (export "julia_plot")
      (param $width i32)     ;; Canvas width
      (param $height i32)    ;; Canvas height
      (param $origin_x f64)  ;; X origin coordinate
      (param $origin_y f64)  ;; Y origin coordinate
      (param $ppu_f64 f64)   ;; Canvas pixels per unit on the complex plane (used floats so it doesn't overflow)
      (param $max_iters i32) ;; Maximum iteration count
      (param $cx f64)
      (param $cy f64)

    (local $x_pos i32)
    (local $y_pos i32)
    (local $zx f64)
    (local $zy f64)
    (local $zx_int f64)
    (local $zy_int f64)
    (local $pixel_offset i32)
    (local $iter i32)
    (local $abs2z f64)
    (local $half_width f64)
    (local $half_height f64)

    (local.set $half_width  (f64.convert_i32_u (i32.shr_u (local.get $width)  (i32.const 1))))
    (local.set $half_height (f64.convert_i32_u (i32.shr_u (local.get $height) (i32.const 1))))

    (local.set $pixel_offset (global.get $image_offset))

    ;; Intermediate X and Y coords based on static values
    ;; $origin - ($half_dimension / $ppu)
    (local.set $zx_int
      (f64.sub (local.get $origin_x)
        (f64.div (local.get $half_width) (local.get $ppu_f64))
      )
    )
    (local.set $zy_int
      (f64.add (local.get $origin_y)
        (f64.div (local.get $half_height) (local.get $ppu_f64))
      )
    )

    (loop $rows
      ;; Continue plotting rows?
      (if (i32.gt_u (local.get $height) (local.get $y_pos))
        (then
          ;; Translate y position to y coordinate
          (local.set $zy
            (f64.sub
              (local.get $zy_int)
              (f64.div (f64.convert_i32_u (local.get $y_pos)) (local.get $ppu_f64))
            )
          )

          (loop $cols
          ;; Continue plotting columns?
            (if (i32.gt_u (local.get $width) (local.get $x_pos))
              (then
                ;; Translate x position to x coordinate
                (local.set $zx
                  (f64.add
                    (local.get $zx_int)
                    (f64.div (f64.convert_i32_u (local.get $x_pos)) (local.get $ppu_f64))
                  )
                )

                ;; Store the current pixel's colour using the value returned from the following
                ;; if expression
                (i32.store
                  (local.get $pixel_offset)
                  (if (result i32)
                    ;; Does the current pixel hit max_iters?
                    (i32.eq
                      (local.get $max_iters)
                      ;; Calculate the current pixel's iteration value and store in $iter
                      (local.tee $iter
                        (local.set $abs2z
                          (call $escape_time
                            (local.get $zx)
                            (local.get $zy)
                            (local.get $cx)
                            (local.get $cy)
                            (local.get $max_iters)
                          )
                        )
                      )
                    )
                    ;; Yup, so return black
                    (then (global.get $BLACK))
                    ;; Nope, so return whatever colour corresponds to this iteration value
                    (else
                      ;; Push the relevant colour from the palette onto the stack
                      (i32.load
                          (i32.add (global.get $palette_offset)
                            (i32.shl
                              (call $to_index (call $continuous_iter (local.get $iter) (local.get $abs2z)))
                              (i32.const 2)
                            )
                          )
                      )
                    )
                  )
                )

                ;; Increment column and memory offset counters
                (local.set $x_pos (i32.add (local.get $x_pos) (i32.const 1)))
                (local.set $pixel_offset (i32.add (local.get $pixel_offset) (i32.const 4)))

                ;; Plot the next column
                br $cols
              )
            )
          ) ;; end of $cols loop

          ;; Reset the column counter and increment the row counter
          (local.set $x_pos (i32.const 0))
          (local.set $y_pos (i32.add (local.get $y_pos) (i32.const 1)))

          ;; Plot the next row
          br $rows
        )
      )
    ) ;; end of $rows loop
  )

  ;; Generate the color pallette (hard-coded twilight colormap)
  (func (export "gen_palette")
    (i32.store (i32.add (global.get $palette_offset) (i32.const 0)) (i32.const 0xFFF4EBF4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 4)) (i32.const 0xFFF3EAF2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 8)) (i32.const 0xFFF2E9F1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 12)) (i32.const 0xFFF1E8EF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 16)) (i32.const 0xFFEFE7EE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 20)) (i32.const 0xFFEEE6EC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 24)) (i32.const 0xFFEDE5EA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 28)) (i32.const 0xFFECE4E9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 32)) (i32.const 0xFFEBE3E7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 36)) (i32.const 0xFFE9E2E6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 40)) (i32.const 0xFFE8E2E5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 44)) (i32.const 0xFFE7E1E3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 48)) (i32.const 0xFFE6E0E2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 52)) (i32.const 0xFFE5DFE0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 56)) (i32.const 0xFFE4DEDF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 60)) (i32.const 0xFFE3DDDD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 64)) (i32.const 0xFFE2DCDC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 68)) (i32.const 0xFFE1DBDA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 72)) (i32.const 0xFFE0DAD9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 76)) (i32.const 0xFFDFDAD7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 80)) (i32.const 0xFFDED9D6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 84)) (i32.const 0xFFDDD8D4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 88)) (i32.const 0xFFDCD7D3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 92)) (i32.const 0xFFDCD6D1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 96)) (i32.const 0xFFDBD5D0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 100)) (i32.const 0xFFDAD4CE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 104)) (i32.const 0xFFD9D4CD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 108)) (i32.const 0xFFD8D3CB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 112)) (i32.const 0xFFD8D2C9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 116)) (i32.const 0xFFD7D1C8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 120)) (i32.const 0xFFD6D0C6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 124)) (i32.const 0xFFD5CFC5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 128)) (i32.const 0xFFD5CFC3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 132)) (i32.const 0xFFD4CEC2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 136)) (i32.const 0xFFD3CDC0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 140)) (i32.const 0xFFD3CCBE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 144)) (i32.const 0xFFD2CBBD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 148)) (i32.const 0xFFD1CBBB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 152)) (i32.const 0xFFD1CABA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 156)) (i32.const 0xFFD0C9B8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 160)) (i32.const 0xFFCFC8B6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 164)) (i32.const 0xFFCFC7B5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 168)) (i32.const 0xFFCEC7B3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 172)) (i32.const 0xFFCEC6B2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 176)) (i32.const 0xFFCDC5B0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 180)) (i32.const 0xFFCDC4AF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 184)) (i32.const 0xFFCCC3AD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 188)) (i32.const 0xFFCCC2AC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 192)) (i32.const 0xFFCCC2AA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 196)) (i32.const 0xFFCBC1A9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 200)) (i32.const 0xFFCBC0A7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 204)) (i32.const 0xFFCABFA6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 208)) (i32.const 0xFFCABEA4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 212)) (i32.const 0xFFCABDA3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 216)) (i32.const 0xFFC9BDA1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 220)) (i32.const 0xFFC9BCA0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 224)) (i32.const 0xFFC9BB9E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 228)) (i32.const 0xFFC8BA9D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 232)) (i32.const 0xFFC8B99B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 236)) (i32.const 0xFFC8B89A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 240)) (i32.const 0xFFC7B799))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 244)) (i32.const 0xFFC7B797))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 248)) (i32.const 0xFFC7B696))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 252)) (i32.const 0xFFC7B595))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 256)) (i32.const 0xFFC6B493))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 260)) (i32.const 0xFFC6B392))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 264)) (i32.const 0xFFC6B291))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 268)) (i32.const 0xFFC6B18F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 272)) (i32.const 0xFFC5B08E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 276)) (i32.const 0xFFC5AF8D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 280)) (i32.const 0xFFC5AF8C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 284)) (i32.const 0xFFC5AE8A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 288)) (i32.const 0xFFC5AD89))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 292)) (i32.const 0xFFC4AC88))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 296)) (i32.const 0xFFC4AB87))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 300)) (i32.const 0xFFC4AA86))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 304)) (i32.const 0xFFC4A985))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 308)) (i32.const 0xFFC4A883))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 312)) (i32.const 0xFFC3A782))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 316)) (i32.const 0xFFC3A681))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 320)) (i32.const 0xFFC3A580))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 324)) (i32.const 0xFFC3A47F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 328)) (i32.const 0xFFC3A47E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 332)) (i32.const 0xFFC3A37D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 336)) (i32.const 0xFFC2A27C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 340)) (i32.const 0xFFC2A17B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 344)) (i32.const 0xFFC2A07A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 348)) (i32.const 0xFFC29F79))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 352)) (i32.const 0xFFC29E78))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 356)) (i32.const 0xFFC29D77))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 360)) (i32.const 0xFFC19C76))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 364)) (i32.const 0xFFC19B76))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 368)) (i32.const 0xFFC19A75))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 372)) (i32.const 0xFFC19974))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 376)) (i32.const 0xFFC19873))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 380)) (i32.const 0xFFC19772))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 384)) (i32.const 0xFFC19671))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 388)) (i32.const 0xFFC09571))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 392)) (i32.const 0xFFC09470))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 396)) (i32.const 0xFFC0936F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 400)) (i32.const 0xFFC0926E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 404)) (i32.const 0xFFC0916E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 408)) (i32.const 0xFFC0906D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 412)) (i32.const 0xFFBF8F6C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 416)) (i32.const 0xFFBF8E6C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 420)) (i32.const 0xFFBF8D6B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 424)) (i32.const 0xFFBF8C6B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 428)) (i32.const 0xFFBF8B6A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 432)) (i32.const 0xFFBF8A69))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 436)) (i32.const 0xFFBE8969))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 440)) (i32.const 0xFFBE8868))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 444)) (i32.const 0xFFBE8768))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 448)) (i32.const 0xFFBE8667))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 452)) (i32.const 0xFFBE8567))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 456)) (i32.const 0xFFBE8466))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 460)) (i32.const 0xFFBD8366))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 464)) (i32.const 0xFFBD8266))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 468)) (i32.const 0xFFBD8165))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 472)) (i32.const 0xFFBD7F65))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 476)) (i32.const 0xFFBC7E64))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 480)) (i32.const 0xFFBC7D64))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 484)) (i32.const 0xFFBC7C64))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 488)) (i32.const 0xFFBC7B63))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 492)) (i32.const 0xFFBC7A63))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 496)) (i32.const 0xFFBB7963))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 500)) (i32.const 0xFFBB7863))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 504)) (i32.const 0xFFBB7762))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 508)) (i32.const 0xFFBB7662))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 512)) (i32.const 0xFFBA7562))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 516)) (i32.const 0xFFBA7462))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 520)) (i32.const 0xFFBA7261))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 524)) (i32.const 0xFFB97161))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 528)) (i32.const 0xFFB97061))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 532)) (i32.const 0xFFB96F61))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 536)) (i32.const 0xFFB86E61))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 540)) (i32.const 0xFFB86D60))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 544)) (i32.const 0xFFB86C60))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 548)) (i32.const 0xFFB76B60))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 552)) (i32.const 0xFFB76960))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 556)) (i32.const 0xFFB76860))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 560)) (i32.const 0xFFB66760))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 564)) (i32.const 0xFFB66660))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 568)) (i32.const 0xFFB56560))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 572)) (i32.const 0xFFB56460))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 576)) (i32.const 0xFFB5635F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 580)) (i32.const 0xFFB4615F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 584)) (i32.const 0xFFB4605F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 588)) (i32.const 0xFFB35F5F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 592)) (i32.const 0xFFB35E5F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 596)) (i32.const 0xFFB25D5F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 600)) (i32.const 0xFFB25C5F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 604)) (i32.const 0xFFB15A5F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 608)) (i32.const 0xFFB1595F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 612)) (i32.const 0xFFB0585F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 616)) (i32.const 0xFFB0575F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 620)) (i32.const 0xFFAF565F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 624)) (i32.const 0xFFAF545F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 628)) (i32.const 0xFFAE535F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 632)) (i32.const 0xFFAD525F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 636)) (i32.const 0xFFAD515F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 640)) (i32.const 0xFFAC505E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 644)) (i32.const 0xFFAC4E5E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 648)) (i32.const 0xFFAB4D5E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 652)) (i32.const 0xFFAA4C5E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 656)) (i32.const 0xFFAA4B5E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 660)) (i32.const 0xFFA94A5E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 664)) (i32.const 0xFFA8485E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 668)) (i32.const 0xFFA7475E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 672)) (i32.const 0xFFA7465E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 676)) (i32.const 0xFFA6455E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 680)) (i32.const 0xFFA5445E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 684)) (i32.const 0xFFA4425E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 688)) (i32.const 0xFFA3415E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 692)) (i32.const 0xFFA3405D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 696)) (i32.const 0xFFA23F5D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 700)) (i32.const 0xFFA13D5D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 704)) (i32.const 0xFFA03C5D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 708)) (i32.const 0xFF9F3B5D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 712)) (i32.const 0xFF9E3A5D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 716)) (i32.const 0xFF9D395D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 720)) (i32.const 0xFF9C375C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 724)) (i32.const 0xFF9B365C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 728)) (i32.const 0xFF9A355C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 732)) (i32.const 0xFF99345C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 736)) (i32.const 0xFF98335C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 740)) (i32.const 0xFF97315B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 744)) (i32.const 0xFF95305B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 748)) (i32.const 0xFF942F5B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 752)) (i32.const 0xFF932E5B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 756)) (i32.const 0xFF922D5A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 760)) (i32.const 0xFF912C5A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 764)) (i32.const 0xFF8F2A5A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 768)) (i32.const 0xFF8E2959))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 772)) (i32.const 0xFF8D2859))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 776)) (i32.const 0xFF8B2758))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 780)) (i32.const 0xFF8A2658))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 784)) (i32.const 0xFF882558))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 788)) (i32.const 0xFF872457))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 792)) (i32.const 0xFF862357))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 796)) (i32.const 0xFF842256))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 800)) (i32.const 0xFF832156))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 804)) (i32.const 0xFF812055))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 808)) (i32.const 0xFF7F1F55))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 812)) (i32.const 0xFF7E1E54))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 816)) (i32.const 0xFF7C1E53))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 820)) (i32.const 0xFF7B1D53))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 824)) (i32.const 0xFF791C52))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 828)) (i32.const 0xFF771B52))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 832)) (i32.const 0xFF751B51))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 836)) (i32.const 0xFF741A50))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 840)) (i32.const 0xFF72194F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 844)) (i32.const 0xFF70194F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 848)) (i32.const 0xFF6F184E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 852)) (i32.const 0xFF6D174D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 856)) (i32.const 0xFF6B174C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 860)) (i32.const 0xFF69164B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 864)) (i32.const 0xFF68164B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 868)) (i32.const 0xFF66154A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 872)) (i32.const 0xFF641549))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 876)) (i32.const 0xFF621448))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 880)) (i32.const 0xFF601447))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 884)) (i32.const 0xFF5F1346))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 888)) (i32.const 0xFF5D1345))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 892)) (i32.const 0xFF5B1344))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 896)) (i32.const 0xFF5A1243))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 900)) (i32.const 0xFF581242))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 904)) (i32.const 0xFF561141))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 908)) (i32.const 0xFF541140))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 912)) (i32.const 0xFF53113F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 916)) (i32.const 0xFF51103E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 920)) (i32.const 0xFF4F103D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 924)) (i32.const 0xFF4E0F3C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 928)) (i32.const 0xFF4C0F3B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 932)) (i32.const 0xFF4A0F3A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 936)) (i32.const 0xFF490E39))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 940)) (i32.const 0xFF470E38))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 944)) (i32.const 0xFF450D37))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 948)) (i32.const 0xFF440D36))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 952)) (i32.const 0xFF420D35))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 956)) (i32.const 0xFF410C34))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 960)) (i32.const 0xFF3F0C33))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 964)) (i32.const 0xFF3E0B31))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 968)) (i32.const 0xFF3C0B30))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 972)) (i32.const 0xFF3A0B2F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 976)) (i32.const 0xFF390A2E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 980)) (i32.const 0xFF370A2D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 984)) (i32.const 0xFF36092C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 988)) (i32.const 0xFF34092B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 992)) (i32.const 0xFF33082A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 996)) (i32.const 0xFF310829))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1000)) (i32.const 0xFF300827))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1004)) (i32.const 0xFF2E0726))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1008)) (i32.const 0xFF2D0725))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1012)) (i32.const 0xFF2C0624))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1016)) (i32.const 0xFF2A0623))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1020)) (i32.const 0xFF290622))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1024)) (i32.const 0xFF2A0623))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1028)) (i32.const 0xFF2A0724))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1032)) (i32.const 0xFF2B0726))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1036)) (i32.const 0xFF2C0727))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1040)) (i32.const 0xFF2D0828))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1044)) (i32.const 0xFF2E0829))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1048)) (i32.const 0xFF2F092B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1052)) (i32.const 0xFF30092C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1056)) (i32.const 0xFF310A2D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1060)) (i32.const 0xFF310A2E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1064)) (i32.const 0xFF320B30))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1068)) (i32.const 0xFF330B31))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1072)) (i32.const 0xFF340C32))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1076)) (i32.const 0xFF350C34))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1080)) (i32.const 0xFF350D35))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1084)) (i32.const 0xFF360D36))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1088)) (i32.const 0xFF370D37))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1092)) (i32.const 0xFF380E39))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1096)) (i32.const 0xFF390E3A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1100)) (i32.const 0xFF390F3B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1104)) (i32.const 0xFF3A0F3D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1108)) (i32.const 0xFF3B0F3E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1112)) (i32.const 0xFF3C103F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1116)) (i32.const 0xFF3C1041))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1120)) (i32.const 0xFF3D1042))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1124)) (i32.const 0xFF3E1143))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1128)) (i32.const 0xFF3E1144))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1132)) (i32.const 0xFF3F1246))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1136)) (i32.const 0xFF401247))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1140)) (i32.const 0xFF411248))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1144)) (i32.const 0xFF41134A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1148)) (i32.const 0xFF42134B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1152)) (i32.const 0xFF42134C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1156)) (i32.const 0xFF43144E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1160)) (i32.const 0xFF44144F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1164)) (i32.const 0xFF441450))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1168)) (i32.const 0xFF451452))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1172)) (i32.const 0xFF451553))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1176)) (i32.const 0xFF461554))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1180)) (i32.const 0xFF471556))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1184)) (i32.const 0xFF471657))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1188)) (i32.const 0xFF481658))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1192)) (i32.const 0xFF48165A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1196)) (i32.const 0xFF49175B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1200)) (i32.const 0xFF49175C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1204)) (i32.const 0xFF4A175E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1208)) (i32.const 0xFF4A185F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1212)) (i32.const 0xFF4A1860))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1216)) (i32.const 0xFF4B1862))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1220)) (i32.const 0xFF4B1963))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1224)) (i32.const 0xFF4C1964))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1228)) (i32.const 0xFF4C1966))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1232)) (i32.const 0xFF4C1A67))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1236)) (i32.const 0xFF4D1A68))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1240)) (i32.const 0xFF4D1A69))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1244)) (i32.const 0xFF4D1B6B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1248)) (i32.const 0xFF4E1B6C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1252)) (i32.const 0xFF4E1C6D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1256)) (i32.const 0xFF4E1C6F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1260)) (i32.const 0xFF4E1C70))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1264)) (i32.const 0xFF4F1D71))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1268)) (i32.const 0xFF4F1D73))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1272)) (i32.const 0xFF4F1E74))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1276)) (i32.const 0xFF4F1E75))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1280)) (i32.const 0xFF4F1F76))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1284)) (i32.const 0xFF501F78))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1288)) (i32.const 0xFF502079))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1292)) (i32.const 0xFF50207A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1296)) (i32.const 0xFF50217B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1300)) (i32.const 0xFF50217D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1304)) (i32.const 0xFF50227E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1308)) (i32.const 0xFF50237F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1312)) (i32.const 0xFF502380))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1316)) (i32.const 0xFF502481))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1320)) (i32.const 0xFF502483))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1324)) (i32.const 0xFF502584))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1328)) (i32.const 0xFF502685))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1332)) (i32.const 0xFF502786))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1336)) (i32.const 0xFF502787))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1340)) (i32.const 0xFF502888))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1344)) (i32.const 0xFF502989))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1348)) (i32.const 0xFF502A8B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1352)) (i32.const 0xFF502A8C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1356)) (i32.const 0xFF502B8D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1360)) (i32.const 0xFF502C8E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1364)) (i32.const 0xFF502D8F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1368)) (i32.const 0xFF502E90))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1372)) (i32.const 0xFF502E91))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1376)) (i32.const 0xFF502F92))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1380)) (i32.const 0xFF503093))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1384)) (i32.const 0xFF503194))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1388)) (i32.const 0xFF503295))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1392)) (i32.const 0xFF503396))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1396)) (i32.const 0xFF503497))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1400)) (i32.const 0xFF503598))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1404)) (i32.const 0xFF503699))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1408)) (i32.const 0xFF4F379A))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1412)) (i32.const 0xFF4F379B))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1416)) (i32.const 0xFF4F389C))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1420)) (i32.const 0xFF4F399D))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1424)) (i32.const 0xFF4F3A9E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1428)) (i32.const 0xFF4F3B9E))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1432)) (i32.const 0xFF4F3C9F))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1436)) (i32.const 0xFF4F3DA0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1440)) (i32.const 0xFF4F3EA1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1444)) (i32.const 0xFF4F3FA2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1448)) (i32.const 0xFF4F40A3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1452)) (i32.const 0xFF4F41A4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1456)) (i32.const 0xFF4F42A4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1460)) (i32.const 0xFF5044A5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1464)) (i32.const 0xFF5045A6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1468)) (i32.const 0xFF5046A7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1472)) (i32.const 0xFF5047A8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1476)) (i32.const 0xFF5048A8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1480)) (i32.const 0xFF5049A9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1484)) (i32.const 0xFF504AAA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1488)) (i32.const 0xFF504BAB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1492)) (i32.const 0xFF504CAB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1496)) (i32.const 0xFF504DAC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1500)) (i32.const 0xFF514EAD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1504)) (i32.const 0xFF514FAE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1508)) (i32.const 0xFF5150AE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1512)) (i32.const 0xFF5152AF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1516)) (i32.const 0xFF5153B0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1520)) (i32.const 0xFF5154B0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1524)) (i32.const 0xFF5255B1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1528)) (i32.const 0xFF5256B2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1532)) (i32.const 0xFF5257B2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1536)) (i32.const 0xFF5258B3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1540)) (i32.const 0xFF5359B4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1544)) (i32.const 0xFF535BB4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1548)) (i32.const 0xFF535CB5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1552)) (i32.const 0xFF545DB6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1556)) (i32.const 0xFF545EB6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1560)) (i32.const 0xFF545FB7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1564)) (i32.const 0xFF5560B7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1568)) (i32.const 0xFF5562B8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1572)) (i32.const 0xFF5563B8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1576)) (i32.const 0xFF5664B9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1580)) (i32.const 0xFF5665BA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1584)) (i32.const 0xFF5766BA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1588)) (i32.const 0xFF5767BB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1592)) (i32.const 0xFF5869BB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1596)) (i32.const 0xFF586ABC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1600)) (i32.const 0xFF596BBC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1604)) (i32.const 0xFF596CBD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1608)) (i32.const 0xFF5A6DBD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1612)) (i32.const 0xFF5B6FBE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1616)) (i32.const 0xFF5B70BE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1620)) (i32.const 0xFF5C71BE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1624)) (i32.const 0xFF5C72BF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1628)) (i32.const 0xFF5D73BF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1632)) (i32.const 0xFF5E75C0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1636)) (i32.const 0xFF5E76C0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1640)) (i32.const 0xFF5F77C1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1644)) (i32.const 0xFF6078C1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1648)) (i32.const 0xFF617AC1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1652)) (i32.const 0xFF627BC2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1656)) (i32.const 0xFF627CC2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1660)) (i32.const 0xFF637DC3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1664)) (i32.const 0xFF647EC3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1668)) (i32.const 0xFF6580C3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1672)) (i32.const 0xFF6681C4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1676)) (i32.const 0xFF6782C4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1680)) (i32.const 0xFF6883C4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1684)) (i32.const 0xFF6985C5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1688)) (i32.const 0xFF6A86C5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1692)) (i32.const 0xFF6B87C5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1696)) (i32.const 0xFF6C88C6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1700)) (i32.const 0xFF6D8AC6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1704)) (i32.const 0xFF6E8BC6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1708)) (i32.const 0xFF6F8CC7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1712)) (i32.const 0xFF708DC7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1716)) (i32.const 0xFF728FC7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1720)) (i32.const 0xFF7390C7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1724)) (i32.const 0xFF7491C8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1728)) (i32.const 0xFF7592C8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1732)) (i32.const 0xFF7793C8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1736)) (i32.const 0xFF7895C9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1740)) (i32.const 0xFF7996C9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1744)) (i32.const 0xFF7A97C9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1748)) (i32.const 0xFF7C98C9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1752)) (i32.const 0xFF7D9ACA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1756)) (i32.const 0xFF7F9BCA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1760)) (i32.const 0xFF809CCA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1764)) (i32.const 0xFF819DCA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1768)) (i32.const 0xFF839ECB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1772)) (i32.const 0xFF84A0CB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1776)) (i32.const 0xFF86A1CB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1780)) (i32.const 0xFF87A2CC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1784)) (i32.const 0xFF89A3CC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1788)) (i32.const 0xFF8AA4CC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1792)) (i32.const 0xFF8CA6CC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1796)) (i32.const 0xFF8EA7CD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1800)) (i32.const 0xFF8FA8CD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1804)) (i32.const 0xFF91A9CD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1808)) (i32.const 0xFF92AACE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1812)) (i32.const 0xFF94ACCE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1816)) (i32.const 0xFF96ADCE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1820)) (i32.const 0xFF97AECF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1824)) (i32.const 0xFF99AFCF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1828)) (i32.const 0xFF9BB0CF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1832)) (i32.const 0xFF9CB1D0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1836)) (i32.const 0xFF9EB3D0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1840)) (i32.const 0xFFA0B4D1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1844)) (i32.const 0xFFA1B5D1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1848)) (i32.const 0xFFA3B6D1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1852)) (i32.const 0xFFA5B7D2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1856)) (i32.const 0xFFA7B8D2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1860)) (i32.const 0xFFA8B9D3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1864)) (i32.const 0xFFAABBD3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1868)) (i32.const 0xFFACBCD4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1872)) (i32.const 0xFFAEBDD4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1876)) (i32.const 0xFFAFBED5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1880)) (i32.const 0xFFB1BFD5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1884)) (i32.const 0xFFB3C0D6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1888)) (i32.const 0xFFB5C1D6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1892)) (i32.const 0xFFB6C2D7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1896)) (i32.const 0xFFB8C3D7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1900)) (i32.const 0xFFBAC5D8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1904)) (i32.const 0xFFBCC6D8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1908)) (i32.const 0xFFBEC7D9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1912)) (i32.const 0xFFBFC8DA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1916)) (i32.const 0xFFC1C9DA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1920)) (i32.const 0xFFC3CADB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1924)) (i32.const 0xFFC5CBDB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1928)) (i32.const 0xFFC7CCDC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1932)) (i32.const 0xFFC8CDDD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1936)) (i32.const 0xFFCACEDD))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1940)) (i32.const 0xFFCCD0DE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1944)) (i32.const 0xFFCED1DF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1948)) (i32.const 0xFFCFD2DF))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1952)) (i32.const 0xFFD1D3E0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1956)) (i32.const 0xFFD3D4E1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1960)) (i32.const 0xFFD5D5E1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1964)) (i32.const 0xFFD6D6E2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1968)) (i32.const 0xFFD8D7E3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1972)) (i32.const 0xFFDAD8E4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1976)) (i32.const 0xFFDBD9E4))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1980)) (i32.const 0xFFDDDBE5))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1984)) (i32.const 0xFFDEDCE6))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1988)) (i32.const 0xFFE0DDE7))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1992)) (i32.const 0xFFE1DEE8))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 1996)) (i32.const 0xFFE3DFE9))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2000)) (i32.const 0xFFE4E0EA))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2004)) (i32.const 0xFFE6E1EB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2008)) (i32.const 0xFFE8E2EB))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2012)) (i32.const 0xFFE9E3EC))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2016)) (i32.const 0xFFEBE4ED))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2020)) (i32.const 0xFFECE5EE))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2024)) (i32.const 0xFFEEE6F0))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2028)) (i32.const 0xFFEFE7F1))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2032)) (i32.const 0xFFF1E8F2))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2036)) (i32.const 0xFFF3E9F3))
    (i32.store (i32.add (global.get $palette_offset) (i32.const 2040)) (i32.const 0xFFF4EBF4))
  )
)